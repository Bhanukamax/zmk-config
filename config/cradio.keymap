/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT 0
#define NUM 2
#define NAV 3
#define FN 4
#define BT 5
#define MOUSE 6

#define HM_A &hm LSFT A
#define HM_O &hm LCTRL O
#define HM_E &hm LALT E
#define HM_U &hm LGUI U

#define HM_S &hm RSFT S
#define HM_N &hm RCTRL N
#define HM_T &hm RALT T
#define HM_H &hm RGUI H

#define HM_Z &hm RGUI Z

#define HM_GT   &hm RSFT GH
#define HM_RBKT &hm RCTRL RBKT
#define HM_RPAR &hm RALT RPAR
#define HM_RBRC &hm RGUI RBRC

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ {

    behaviors {
        hml: homerow_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        rettab: ret_alt_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "RET_ALT_TAB";
            #binding-cells = <0>;
            bindings = <&kp RET>, <&kp TAB>;
            mods = <(MOD_RALT)>;
        };
        numtab: num_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ALT_TAB";
            #binding-cells = <0>;
            bindings = <&mo NUM>, <&kp LS(TAB)>;
            mods = <(MOD_RALT)>;
        };
        navstab: nav_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "NAV_ALT_SHIFT_TAB";
            #binding-cells = <0>;
            bindings = <&mo NAV>, <&kp LS(TAB)>;
            mods = <(MOD_LALT)>;
        };
        shftspctab: shift_space_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_SPACE_ALT_TAB";
            #binding-cells = <0>;
            bindings = <&mt LSFT SPC>, <&kp TAB>;
            mods = <(MOD_LALT)>;
        };
        ctrld: ctrl_d_and_mouse_d {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_D_AND_MOUSE_D";
            #binding-cells = <0>;
            bindings = <&hml MOUSE D>, <&kp D>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        ctrlp_hm_p: ctrl_p_and_hm_p {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_P_AND_HM_P";
            #binding-cells = <0>;
            bindings = <&hm F13 P>, <&kp P>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };


    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_sl_fn {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&sl FN>;
        };

        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <10 11 12 13>;
            bindings = <&bootloader>;
        };


    };

    /*

      00   01   02   03   04       05   06   07   08   09
      10   11   12   13   14       15   16   17   18   19
      20   21   22   23   24       25   26   27   28   29
                     30   31       32   33

     */

        keymap {
                compatible = "zmk,keymap";

                   DEFAULT {
		bindings = <
      &kp SQT   &kp CMMA      &kp DOT   &kp P       &kp Y    &kp F    &kp G   &kp C    &kp R    &kp L
      HM_A      HM_O	        HM_E      HM_U        &kp I    &kp D    HM_H    HM_T     HM_N     HM_S
      &kp SEMI  &kp Q         &kp J     &kp K       &kp X    &kp B    &kp M   &kp W    &kp V    HM_Z
      &mo NAV   &mt LSFT SPC  &mo NUM   &hm LCTL RET
		>;
		};

       		NUM {
		bindings = <
		&kp LT		 &kp LBKT 	 &kp LPAR	    &kp LBRC	 &kp TAB 				&kp ESC     &kp NUM_7		&kp NUM_8	 &kp NUM_9	 &kp RALT
		HM_GT		   HM_RBKT 	   HM_RPAR	    HM_RBRC    &kp SLASH		  &kp QMARK		  &kp NUM_4		&kp NUM_5	 &kp NUM_6	 &kp BSPC
		&kp MINUS	 &kp EQUAL	 &kp UNDER	  &kp PLUS	 &kp GRAVE			&kp NUM_0	  &kp NUM_1		&kp NUM_2	 &kp NUM_3	 &kp BSLH
		                                    &trans     &trans  				&trans      &trans
		>;
		};

       		NAV {
		bindings = <
		&kp NUM_1   &kp NUM_2       &kp NUM_3     &kp NUM_4      &kp NUM_5		        &kp HOME         &kp PG_UP   &kp PG_DN   &kp END     &kp NUM_0
		&kp LCTL    &kp LSFT        &kp LALT      &kp LGUI       &kp ESC 		          &kp LEFT         &kp DOWN    &kp UP      &kp RIGHT   &kp BSPC
		&bt BT_CLR  &bt BT_SEL 0  	&bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3         &kp LG(GRAVE)    &kp GRAVE   &kp LBKT    &kp RBKT    &kp DEL
					                                    &trans         &trans  		          &trans           &trans
		>;
		};

		FN {
		bindings = <
		&kp F1	    &kp F2	        &kp F3	      &kp F4	          &kp F5			&kp F6	&kp F7	&kp F8	&kp F9	&kp F10
		&kp C_PP	  &kp C_MUTE	    &kp C_VOL_DN	&kp C_VOL_UP	    &none       &none 	&none	  &none   &kp F11	&kp F12
		&kp C_PREV	&kp C_NEXT	    &kp C_BRI_DN	&kp C_BRI_UP	    &none				&none 	&none 	&none  	&none	  &none
                                                    &trans      &trans 			&trans  &trans
		>;
		};

		BT {
		bindings = <
		&kp NUM_1	    &kp NUM_2	    &kp NUM_3	    &kp NUM_4	&kp NUM_5     &trans	    &trans	  		 &trans	  		 &trans			   &trans
		&kp F1	      &kp F2	      &kp F3	      &kp F4		&kp F5  	    &trans	    &bt BT_SEL 0	 &bt BT_SEL 1	 &bt BT_SEL 2	 &trans
		&bt BT_CLR	  &bt BT_NXT		&bt BT_PRV    &kp F6		&kp F7 				&trans	    &kp PG_DN 		 &kp K_VOL_DN	 &trans		  	 &trans
					                                    &trans    &trans  			&trans      &trans
		>;
		};

		MOUSE {
		bindings = <
		&kp LALT	&kp LC(W)	    &none	        &kp LC(R)	        &kp LC(T)		&kp LA(LEFT)	&mwh SCROLL_DOWN	&mmv MOVE_UP	  &mwh SCROLL_UP        &kp LA(RIGHT)
		&kp LC(A)	&kp LS(TAB)	  &kp RALT	    &kp TAB	          &none	      &kp M	        &mmv MOVE_LEFT    &mmv MOVE_DOWN	&mmv MOVE_RIGHT	      &none
		&kp LC(Z)	&kp LC(X)	    &kp LC(C)	    &kp LC(V)	        &kp ESC	    &none	        &mkp RCLK	        &none	          &none	                &kp LALT
		                                      &mkp RCLK         &mkp LCLK 	&to DEFAULT   &mkp LCLK
		>;
		};

	};
};
